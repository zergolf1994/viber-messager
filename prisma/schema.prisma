// prisma/schema.prisma
datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum UserRole {
    ADMIN
    USER
}

model users {
    id       String   @id @default(uuid()) @map("_id")
    enable   Boolean  @default(true)
    name     String?
    email    String?  @unique
    image    String?
    password String?
    role     UserRole @default(USER)

    createdAt DateTime  @default(now())
    updatedAt DateTime?

    auths auths[]
}

model auths {
    id     String  @id @default(uuid()) @map("_id")
    enable Boolean @default(true)
    userId String

    user users @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
}

enum ChatType {
    viber
    group
}

model chats {
    id      String   @id @default(uuid()) @map("_id")
    enable  Boolean  @default(true)
    type    ChatType @default(viber)
    token   String?
    image   String?
    name    String?
    uri     String?
    webhook String?

    createdAt DateTime  @default(now())
    updatedAt DateTime?

    members members[]
}

model members {
    id         String  @id @default(uuid()) @map("_id")
    chatId     String
    name       String
    image      String?
    user_token String  @unique
    subscribed Boolean @default(true)
    username   String?

    createdAt DateTime  @default(now())
    lastAt    DateTime?

    chat    chats      @relation(fields: [chatId], references: [id], onDelete: Cascade)
    message messages[]
}

enum SendType {
    member
    user
}

model messages {
    id       String   @id @default(uuid()) @map("_id")
    chatId   String
    memberId String
    userId   String?
    sent_by  SendType @default(member)
    type     String   @default("text")
    text     String?
    mediaId  String?

    message_token BigInt?
    createdAt     DateTime  @default(now())
    seenAt        DateTime?

    member members @relation(fields: [memberId], references: [id], onDelete: Cascade)
}
